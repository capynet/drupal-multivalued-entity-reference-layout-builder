<?php

/**
 * @file
 * Primary module hooks for paragraphs_entity_layout module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\merlb\MerlbRenderer;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 */
function merlb_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add a 'merlb Layout' base field to all node types.
  if ($entity_type->id() === 'node') {
    $fields['merlb_layout'] = BaseFieldDefinition::create('map')
      ->setLabel(t('merlb Layout'))
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'region' => 'hidden',
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayOptions('view', [
        'region' => 'hidden',
      ])
      ->setDisplayConfigurable('view', FALSE)
      ->setRequired(TRUE);
  }

  return $fields;
}

/**
 * Implements hook_node_view()
 */
function merlb_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode === 'full') {
    \Drupal::classResolver(MerlbRenderer::class)->buildView($build, $node);
  }
}

/**
 * Implements hook_theme().
 */
function merlb_theme($existing, $type, $theme, $path) {
  return [
    'merlb_builder_rendered_layout' => [
      'variables' => [
        'layout' => [],
        'components' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for \Drupal\node\NodeTypeForm.
 *
 * Adds merlb options to the node type form.
 *
 * @see NodeTypeForm::form()
 * @see merlb_form_node_type_form_submit()
 */
function merlb_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();
  $options = _merlb_get_field_options($type);

  $form['merlb'] = [
    '#type' => 'details',
    '#title' => t('Multivalued entity reference layout builder (Merlb)'),
    '#tree' => TRUE,
    '#group' => 'additional_settings',
  ];

  if (empty($options)) {
    $form['merlb']['markup'] = [
      '#markup' => t('There are no fields to process. Please add a multivalued entity reference field.'),
    ];

    $form['merlb']['enabled'] = [
      '#type' => 'value',
      '#value' => FALSE,
    ];

  }
  else {
    $form['merlb']['enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#default_value' => $type->getThirdPartySetting('merlb', 'enabled'),
      '#description' => t('Enable Merlb support for this content type.'),
    ];

    $form['merlb']['field_names'] = [
      '#type' => 'checkboxes',
      '#title' => t('Fields'),
      '#default_value' => $type->getThirdPartySetting('merlb', 'field_names'),
      '#options' => $options,
      '#description' => t('Choose the field to add Merlb support.'),
      '#states' => [
        'invisible' => [
          'input[name="merlb[enabled]"]' => ['checked' => FALSE],
        ],
      ],
    ];
  }

  $form['#validate'][] = 'merlb_form_node_type_form_validate';
  $form['#entity_builders'][] = 'merlb_form_node_type_form_builder';
}

/**
 * Validate handler for forms with merlb options.
 *
 * @see merlb_form_node_type_form_alter()
 */
function merlb_form_node_type_form_validate(&$form, FormStateInterface $form_state) {
  // Clear the field name if the support has been disabled.
  if (empty($form_state->getValue(['merlb', 'enabled']))) {
    $form_state->setValue(['merlb', 'field_names'], '');
  }
}

/**
 * Entity builder for the node type form with merlb options.
 *
 * @see merlb_form_node_type_form_alter()
 */
function merlb_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  // @todo check first time third party gets saved. I suspect it will trigger an error since the setting does not exist.
  $type->setThirdPartySetting('merlb', 'enabled', $form_state->getValue(['merlb', 'enabled']));
  $type->setThirdPartySetting('merlb', 'field_names', $form_state->getValue(['merlb', 'field_names']));
}

/**
 * Helper function to get the list of entity reference fields in a given content type.
 *
 * @param \Drupal\node\NodeTypeInterface $type
 *   The node type to extract the fields from.
 *
 * @return array
 *   The list of fields declared in the given content type.
 */
function _merlb_get_field_options(NodeTypeInterface $type) {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');
  $fields = $field_manager->getFieldDefinitions('node', $type->id());
  $options = [];

  foreach ($fields as $id => $field) {
    if ($field instanceof FieldConfig && ($field->getType() === 'entity_reference' || $field->getType() === 'entity_reference_revisions') && $field->getFieldStorageDefinition()->isMultiple()) {
      $options[$id] = $field->getLabel();
    }
  }

  return $options;
}


/**
 * Implements hook_ENTITY_presave().
 *
 * If the saved entity has a layout attached we check if some
 * referenced element was deleted and allocated on the layout.
 * In that case we remove it from the layout too.
 */
/* function merlb_entity_presave(EntityInterface $entity) {
  $bundle_type = $entity->getEntityType()->getBundleEntityType();

  if (is_null($bundle_type) || $entity->isNew()) {
    return;
  }

  $entity_type = \Drupal::entityTypeManager()->getStorage($bundle_type)->load($entity->bundle());

  if (is_null($entity_type)) {
    return;
  }

  $merlb_enabled = (bool) $entity_type->getThirdPartySetting('merlb', 'enabled', FALSE);
  $merlb_field_name = $entity_type->getThirdPartySetting('merlb', 'field_names', '');
  $json_been_modified = FALSE;

  if (!$merlb_enabled || empty($merlb_field_name)) {
    return;
  }

  if (!$entity->merlb_layout->isEmpty()) {
    $json = JSON::decode($entity->merlb_layout->value);

    // @todo check this snippet since the logic of how json file is constructed changed a lot.
    foreach ($json as $k_row => $row) {
      foreach ($row['cols'] as $k_col => $col) {
        if (!in_array('empty', $col['components'], TRUE)) {
          foreach ($col['components'] as $k_component => $component) {
            $stored_component_id = $component['id'];
            $exists = _merlb_check_component_still_exist(
              $stored_component_id,
              $entity->{$merlb_field_name}->getValue()
            );

            if (!$exists) {
              $json_been_modified = TRUE;
              unset($json[$k_row]['cols'][$k_col]['components'][$k_component]);

              if (empty($json[$k_row]['cols'][$k_col]['components'])) {
                $json[$k_row]['cols'][$k_col]['components'] = ['empty'];
              }

            }
          }
        }
      }
    }

    if ($json_been_modified) {
      $entity->merlb_layout->value = JSON::encode($json);
    }
  }

} */

/**
 * Checks if a component id is on the entity referenced items.
 *
 * @param string $entity_uuid
 *   Needle
 * @param array $available_referenced_entities
 *  Haystack
 *
 * @return bool
 */
/* function _merlb_check_component_still_exist($entity_uuid, $available_referenced_entities) {
  $entity = \Drupal::service('entity.repository')->loadEntityByUuid('paragraph', $entity_uuid);

  foreach ($available_referenced_entities as $item) {
    $found = $item["target_id"] == $entity->id();

    if ($found) {
      return TRUE;
    }
  }
  return FALSE;
}
 */